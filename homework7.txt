Test your Knowledge
1. Describe the problem generics address.
generics refer to general form, not specific. C# allows us to define generic classes,interfaces,abstract classes,fields, properties,events delegates using the type parameter without the specific data type.
The problem that generics address is the need to write code that can work with multiple data types without having to create separate implementations for each type. it help increase code reusability and type safety.

2. How would you create a list of strings, using the generic List class?
List<string> list = new List<string>()

3. How many generic type parameters does the Dictionary class have?
two; T key & T value

4. True/False. When a generic class has multiple type parameters, they must all match.
True

5. What method is used to add items to a List object?
add()

6. Name two methods that cause items to be removed from a List.
Clear(); Remove(T item); RemoveAt(int index);

7. How do you indicate that a class has a generic type parameter?
To indicate that a class has a generic type parameter in C#, you include the type parameter in the class definition using angle brackets 

8. True/False. Generic classes can only have one generic type parameter.
false

9. True/False. Generic type constraints limit what can be used for the generic type.
true

10. True/False. Constraints let you use the methods of the thing you are constraining to.
true

Practice working with Generics
1. Create a custom Stack class MyStack<T> that can be used with any data type which
has following methods
1. int Count()
2. T Pop()
3. Void Push()

2. Create a Generic List data structure MyList<T> that can store any data type.
Implement the following methods.
1. void Add (T element)
2. T Remove (int index)
3. bool Contains (T element)
4. void Clear ()
5. void InsertAt (T element, int index)
6. void DeleteAt (int index)
7. T Find (int index)

3. Implement a GenericRepository<T> class that implements IRepository<T> interface
that will have common /CRUD/ operations so that it can work with any data source
such as SQL Server, Oracle, In-Memory Data etc. Make sure you have a type constraint
on T were it should be of reference type and can be of type Entity which has one
property called Id. IRepository<T> should have following methods
1. void Add(T item)
2. void Remove(T item)
3. Void Save()
4. IEnumerable<T> GetAll()
5. T GetById(int id)
